<launch>
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="first_tb3"  default="tb3_0"/>
  <arg name="second_tb3" default="tb3_1"/>

  <arg name="first_tb3_x_pos" default="-2.0"/>
  <arg name="first_tb3_y_pos" default="-0.5"/>
  <arg name="first_tb3_z_pos" default=" 0.0"/>

  <arg name="second_tb3_x_pos" default=" 2.0"/>
  <arg name="second_tb3_y_pos" default=" 0.5"/>
  <arg name="second_tb3_z_pos" default=" 0.0"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_world.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>  

  <!--added-->
  <arg name="database_path_tb0"     default="rtabmap_tb0.db"/>
  <arg name="database_path_tb1"     default="rtabmap_tb1.db"/>
  <arg name="with_camera" default="true"/>
  <arg name="simulation"        default="true"/>
  <arg name="wait_for_transform"  default="0.2"/>
  <arg name="localization"      default="false"/>
  <arg name="args"  default="--delete_db_on_start"/>

  <!--added-->

  <group ns = "$(arg first_tb3)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" value="$(arg first_tb3)" />
    </node>
    
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg first_tb3) -x $(arg first_tb3_x_pos) -y $(arg first_tb3_y_pos) -z $(arg first_tb3_z_pos) -param robot_description" />
    <?ignore
    <!-- turtlebot3_teleop_key already has its own built in velocity smoother -->
    <node pkg="turtlebot3_teleop" type="turtlebot3_teleop_key" name="turtlebot3_teleop_first_tb3"  output="screen" launch-prefix="xterm -e">
    </node>
    ?>
    <!--added-->

    <node pkg="rtabmap_sync" type="rgbd_sync" name="rgbd_sync" output="screen">
        <remap from="rgb/image"       to="rtabmap/camera/rgb/image_raw"/>
  	    <remap from="depth/image"     to="rtabmap/camera/depth/image_raw"/>
  	    <remap from="rgb/camera_info" to="rtabmap/camera/rgb/camera_info"/>
      </node>

    <node name="rtabmap" pkg="rtabmap_slam" type="rtabmap" output="screen" args="$(arg args)">
	    <param name="database_path"       type="string" value="$(arg database_path_tb0)"/>
	    <param name="frame_id"            type="string" value="base_footprint"/>
      <param name="subscribe_rgb"   type="bool" value="false"/>
      <param name="subscribe_depth" type="bool" value="false"/>
      <param name="subscribe_rgbd" type="bool" value="true"/>
	    <param name="wait_for_transform_duration"  type="double"   value="$(arg wait_for_transform)"/>
	    <param name="subscribe_depth"     type="bool"   value="true"/>
	    <param name="subscribe_scan"      type="bool"   value="true"/>
	    <param name="map_negative_poses_ignored" type="bool" value="true"/>

      <!-- Fix odom covariance as in simulation the covariance in /odom topic is high (0.1 for linear and 0.05 for angular) -->
      <param name="odom_frame_id" value="odom"/>
      <param name="odom_tf_linear_variance" value="0.001"/>
      <param name="odom_tf_angular_variance" value="0.001"/>

	    <!-- inputs -->
	    <remap from="scan"            to="rtabmap/scan"/>
      <remap from="odom"            to="rtabmap/odom"/>	
      <remap from="rgbd_image"      to="rgbd_image"/>    

  	  <!-- output -->
  	  <remap from="grid_map" to="rtabmap/map"/>
      <remap from="mapData" to="rtabmap/mapData"/>

      <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
      <param name="RGBD/ProximityBySpace"        type="string" value="true"/>   <!-- Local loop closure detection (using estimated position) with locations in WM -->
      <param name="RGBD/OptimizeFromGraphEnd"    type="string" value="false"/>  <!-- Set to false to generate map correction between /map and /odom -->
      <param name="Kp/MaxDepth"                  type="string" value="4.0"/>
      <param name="Reg/Strategy"                 type="string" value="1"/>      <!-- Loop closure transformation: 0=Visual, 1=ICP, 2=Visual+ICP -->
      <param name="Icp/CorrespondenceRatio"      type="string" value="0.3"/>
      <param name="Vis/MinInliers"               type="string" value="15"/>      <!-- 3D visual words minimum inliers to accept loop closure -->
      <param name="Vis/InlierDistance"           type="string" value="0.1"/>    <!-- 3D visual words correspondence distance -->
      <param name="RGBD/AngularUpdate"           type="string" value="0.1"/>    <!-- Update map only if the robot is moving -->
      <param name="RGBD/LinearUpdate"            type="string" value="0.1"/>    <!-- Update map only if the robot is moving -->
      <param name="RGBD/ProximityPathMaxNeighbors" type="string" value="0"/>
      <param name="Rtabmap/TimeThr"              type="string" value="0"/>
      <param name="Mem/RehearsalSimilarity"      type="string" value="0.30"/>
      <param name="Reg/Force3DoF"                type="string" value="true"/>
      <param name="GridGlobal/MinSize"           type="string" value="20"/>


	    <!-- localization mode -->
	    <param name="Mem/IncrementalMemory" type="string" value="true"/>
    </node>
    <node pkg="rviz" type="rviz" name="rviz" required="true"
          args="-d $(find turtlebot3_navigation)/rviz/turtlebot3_navigation.rviz"/>
    <!--added-->

  </group>

  <group ns = "$(arg second_tb3)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
      <param name="publish_frequency" type="double" value="50.0" />
      <param name="tf_prefix" value="$(arg second_tb3)" />
    </node>

    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg second_tb3) -x $(arg second_tb3_x_pos) -y $(arg second_tb3_y_pos) -z $(arg second_tb3_z_pos) -param robot_description" />

    <!-- turtlebot3_teleop_key already has its own built in velocity smoother -->
    <?ignore
  <node pkg="turtlebot3_teleop" type="turtlebot3_teleop_key" name="turtlebot3_teleop_second_tb3"  output="screen" launch-prefix="xterm -e">
  </node>
  ?>

  <!--added-->
    <node name="rtabmap" pkg="rtabmap_slam" type="rtabmap" output="screen" args="$(arg args)">
	    <param name="database_path"       type="string" value="$(arg database_path_tb1)"/>
	    <param name="frame_id"            type="string" value="base_footprint"/>
	    <param name="wait_for_transform_duration"  type="double"   value="$(arg wait_for_transform)"/>
	    <param name="subscribe_depth"     type="bool"   value="true"/>
	    <param name="subscribe_scan"      type="bool"   value="true"/>
	    <param name="map_negative_poses_ignored" type="bool" value="true"/>

      <!-- Fix odom covariance as in simulation the covariance in /odom topic is high (0.1 for linear and 0.05 for angular) -->
      <param name="odom_frame_id" value="odom"/>
      <param name="odom_tf_linear_variance" value="0.001"/>
      <param name="odom_tf_angular_variance" value="0.001"/>

	    <!-- inputs -->
	    <remap from="scan"          to="rtabmap/scan"/>
      <remap from="odom"            to="/odom"/>
	    <remap from="rgb/image"     to="rtabmap/camera/rgb/image_raw"/>
  	  <remap from="depth/image"     to="rtabmap/camera/depth/image_raw"/>
  	  <remap from="rgb/camera_info" to="rtabmap/camera/rgb/camera_info"/>

  	  <!-- output -->
  	  <remap from="grid_map" to="map"/>
      <remap from="mapData" to="rtabmap/mapData"/>

      <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
      <param name="RGBD/ProximityBySpace"        type="string" value="true"/>   <!-- Local loop closure detection (using estimated position) with locations in WM -->
      <param name="RGBD/OptimizeFromGraphEnd"    type="string" value="false"/>  <!-- Set to false to generate map correction between /map and /odom -->
      <param name="Kp/MaxDepth"                  type="string" value="4.0"/>
      <param name="Reg/Strategy"                 type="string" value="0"/>      <!-- Loop closure transformation: 0=Visual, 1=ICP, 2=Visual+ICP -->
      <param name="Icp/CorrespondenceRatio"      type="string" value="0.3"/>
      <param name="Vis/MinInliers"               type="string" value="15"/>      <!-- 3D visual words minimum inliers to accept loop closure -->
      <param name="Vis/InlierDistance"           type="string" value="0.1"/>    <!-- 3D visual words correspondence distance -->
      <param name="RGBD/AngularUpdate"           type="string" value="0.1"/>    <!-- Update map only if the robot is moving -->
      <param name="RGBD/LinearUpdate"            type="string" value="0.1"/>    <!-- Update map only if the robot is moving -->
      <param name="RGBD/ProximityPathMaxNeighbors" type="string" value="0"/>
      <param name="Rtabmap/TimeThr"              type="string" value="0"/>
      <param name="Mem/RehearsalSimilarity"      type="string" value="0.30"/>
      <param name="Reg/Force3DoF"                type="string" value="true"/>
      <param name="GridGlobal/MinSize"           type="string" value="20"/>


	    <!-- localization mode -->
	    <param name="Mem/IncrementalMemory" type="string" value="true"/>
	    <param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/>
    </node>
    <!--added-->

  </group>

 <node pkg="tf" type="static_transform_publisher" name="world_to_$(arg first_tb3)_tf_broadcaster"  args="0 0 0 0 0 0 /odom /$(arg first_tb3)/base_link 100"/>
  <node pkg="tf" type="static_transform_publisher" name="world_to_$(arg second_tb3)_tf_broadcaster" args="0 0 0 0 0 0 /odom /$(arg second_tb3)/base_link 100"/>


</launch>